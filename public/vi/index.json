[
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.1-single-lambda-response/3.1.1-create-iam-policies-and-roles/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "Vì bạn đang ở IAM dashboard từ bước trước, bây giờ hãy chuyển sang phần Policies để tạo một policy cho execution role.\nTạo policy cho execution role\nĐầu tiên nhấn Create policy Chọn định dạng json và dán đoạn JSON sau vào Policy editor, sau đó nhấn Next { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;EC2Snapshot\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:AuthorizeSecurityGroupIngress\u0026#34;, \u0026#34;ec2:Describe*\u0026#34;, \u0026#34;logs:CreateLogStream\u0026#34;, \u0026#34;ec2:CreateSecurityGroup\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34;, \u0026#34;ec2:CreateSnapshots\u0026#34;, \u0026#34;ec2:CreateSnapshot\u0026#34;, \u0026#34;ec2:ModifyInstanceAttribute\u0026#34;, \u0026#34;ec2:StopInstances\u0026#34;, \u0026#34;logs:CreateLogGroup\u0026#34;, \u0026#34;logs:PutLogEvents\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34; } ] } Kết quả sẽ như hình dưới đây. Đặt tên cho policy là: ec2instance-containment-with-forensics-policy và giữ nguyên các thiết lập còn lại, sau đó nhấn Create policy. Tạo execution role cho Lambda Function\nVẫn trong IAM dashboard, chuyển sang phần Roles ở thanh bên trái, chọn Create role Mặc định Trusted entity type sẽ là AWS service. Ở phần Service or use case, chọn Lambda rồi nhấn Next. Gán policy ec2instance-containment-with-forensics-policy vừa tạo và nhấn Next. Đặt tên Role là ec2instance-containment-with-forensics-role, giữ nguyên các thiết lập còn lại và nhấn Create Role. Sau khi hoàn tất, bạn có thể chuyển sang bước tiếp theo Create Lambda Function\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/1-introduction/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Các phương pháp kịch bản phản ứng sự cố tự động Trong phòng lab này, chúng ta sẽ triển khai hai loại kịch bản phản ứng sự cố (IR) tự động bằng cách sử dụng các dịch vụ gốc của AWS. Mỗi phương pháp cung cấp những ưu điểm và điểm đánh đổi riêng, tùy thuộc vào độ phức tạp và thời lượng của các tác vụ khắc phục.\nPhòng lab này được thực hiện tại vùng: us-east-1 (N. Virginia).\nThời lượng phòng lab khoảng 3 giờ, ngay cả khi bạn không hoàn thành, hãy truy cập phần dọn dẹp tài nguyên để tránh bị tính phí.\n1. Kịch bản IR dựa trên Lambda Phương pháp này sử dụng một hàm AWS Lambda để thực hiện các hành động khắc phục ngay khi phát hiện sự cố. Đây là phương pháp đơn giản và nhanh nhất để triển khai. Tuy nhiên, nó có điểm hạn chế đáng chú ý:\nThời gian thực thi bị giới hạn trong 15 phút, nghĩa là nó không thể xử lý các tác vụ kéo dài, chẳng hạn như chờ một bản sao lưu EBS hoàn tất hoặc thu thập dữ liệu pháp y chi tiết. Phù hợp nhất cho các hành động ngay lập tức và nhẹ nhàng, như gắn thẻ, cách ly instance bằng cách thay đổi security group, hoặc gửi cảnh báo. 2. Kịch bản IR dựa trên Step Functions Phương pháp này sử dụng AWS Step Functions để điều phối phản ứng sự cố dưới dạng một modular state machine, cho phép một quy trình IR linh hoạt và mạnh mẽ hơn.\nKhông giống như Lambda, không có giới hạn thời gian thực thi, cho phép xử lý các quy trình phức tạp, nhiều bước có thể kéo dài vài phút hoặc thậm chí vài giờ. Các tác vụ có thể được chia thành các trạng thái độc lập và dễ quản lý, bao gồm thực thi song song, thử lại, điều kiện chờ và logic xử lý lỗi. Lý tưởng cho các tình huống yêu cầu thực hiện theo trình tự, như tạo bản sao lưu, thu thập dữ liệu pháp y (forensic data), thông báo đến nhiều hệ thống, sau đó chấm dứt hoặc cách ly instance. Bằng cách so sánh hai phương pháp, bài lab này nổi bật cách các công cụ tự động hóa của AWS có thể được tùy chỉnh để đáp ứng các nhu cầu phản ứng khác nhau — từ phản ứng nhanh đến các quy trình khắc phục toàn diện.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/2-preparation/2.1-deploy-the-cloudformation-stack/",
	"title": "Triển khai CloudFormation stack",
	"tags": [],
	"description": "",
	"content": "Để khởi động kịch bản và tạo cơ sở hạ tầng, chúng ta cần triển khai một mẫu CloudFormation.\nBạn có thể tải xuống tệp ví dụ tại đây: Tệp CloudFormation JSON.\nTruy cập CloudFormation\nTìm kiếm CloudFormation. Chọn CloudFormation để mở CloudFormation Dashboard. Trong CloudFormation Dashboard\nChọn Stacks. Nhấn Create stack. Trong giao diện Create stack, tại mục Create stack\nChọn Choose an existing template. Trong phần Specify template, chọn Upload a template file. Nhấp Choose file và tải lên tệp cfn.json đã tải ở bước trên. Nhấn Next. Trong giao diện Specify stack details\nỞ mục Provide a stack name, nhập tên stack: AutomatedIncidentResponseWorkshop. Trong phần Parameters, tại Automatically enable GuardDuty? chọn Yes-Enable GuardDuty. Giữ nguyên các cài đặt còn lại, nhấn Next. Trong giao diện Configure stack options, tại phần Capabilities\nĐánh dấu chọn cả hai ô dưới đây. Trong bước Review and create:\nNếu bạn đã làm các bước trên, hãy cuộn xuống và nhấn nút Submit. Trước khi tiếp tục, đảm bảo stack có trạng thái CREATE_COMPLETE. Quá trình này có thể mất vài phút, bạn có thể tranh thủ đi uống nước trong lúc chờ.\nNếu trạng thái stack là CREATE_COMPLETE, hãy tiếp tục sang bước tiếp theo Thiết lập Security Group\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.2-step-function-response/3.2.1-deploy-the-cloudformation-stack/",
	"title": "Triển khai CloudFormation stack",
	"tags": [],
	"description": "",
	"content": "Để bắt đầu kịch bản và tạo cơ sở hạ tầng cần thiết, chúng ta cần triển khai một CloudFormation template.\nBạn có thể tải về: CloudFormation template chứa kiến trúc.\nTruy cập vào CloudFormation\nTìm kiếm CloudFormation. Chọn CloudFormation để mở CloudFormation Dashboard. Trong CloudFormation Dashboard\nChọn Stacks. Nhấn Create stack. Trong giao diện Create stack, dưới phần Create stack\nChọn Choose an existing template. Ở mục Specify template, chọn Upload a template file. Nhấn Choose file và tải lên tệp IRWorkshop-StepFunctionsResponse.yaml đã tải ở trên. Nhấn Next. Trong giao diện Specify stack details, ở phần Specify stack details\nỞ mục Provide a stack name, nhập Stack name: workshop-IR-StepFunctions. Ở mục Parameters, nhập một địa chỉ email hợp lệ và một optional prefix cho các tài nguyên sẽ được tạo. Nhấn Next. Trong giao diện Configure stack options, ở phần Capabilities\nChọn dấu tích vào ô bên dưới. Trong phần Review and create:\nNếu bạn làm đúng các bước, hãy cuộn xuống và nhấn nút Submit. Trước khi tiếp tục, hãy chắc chắn rằng stack đang ở trạng thái CREATE_COMPLETE. Quá trình này sẽ mất vài phút, bạn có thể tranh thủ đi uống nước.\nNếu stack hiển thị trạng thái CREATE_COMPLETE, hãy chuyển sang bước tiếp theo Đăng ký SNS\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/",
	"title": "Tự động hoá phản hồi sự cố",
	"tags": [],
	"description": "",
	"content": "Tự động hoá phản hồi sự cố Tổng quan Bài lab này được thiết kế để mô phỏng và phản hồi một sự cố bảo mật trong môi trường cloud, liên quan đến một EC2 instance bị xâm nhập trong môi trường AWS. Mục tiêu là xây dựng và triển khai playbook phản hồi sự cố (IR) tự động để phát hiện và khắc phục hoạt động độc hại mà không cần can thiệp thủ công, tận dụng các công cụ và dịch vụ gốc của AWS.\nTóm tắt kịch bản Kẻ tấn công đã xâm nhập thành công một EC2 instance, có thể thông qua một lỗ hổng như OS command injection. Sau khi truy cập trái phép, kẻ tấn công:\nCài đặt TOR client để giao tiếp ẩn danh với máy chủ điều khiển và điều khiển (C2) bên ngoài. Cố gắng thực hiện đào Bitcoin và thiết lập kết nối đến địa chỉ IP độc hại đã biết. Các phương pháp triển khai Playbook phản hồi sự cố tự động Trong lab này, chúng ta sẽ triển khai hai phương pháp phản hồi sự cố tự động (IR) sử dụng các dịch vụ gốc của AWS. Mỗi phương pháp có ưu điểm và điểm hạn chế riêng, phù hợp với các tình huống và mức độ phức tạp khác nhau của quá trình xử lý.\n1. Playbook IR dựa trên Lambda Phương pháp này sử dụng một hàm AWS Lambda duy nhất để thực hiện các hành động khắc phục ngay khi phát hiện sự cố. Đây là phương pháp đơn giản và triển khai nhanh nhất. Tuy nhiên, nó có một giới hạn quan trọng:\nThời gian thực thi bị giới hạn ở 15 phút, do đó không phù hợp với các tác vụ kéo dài, như chờ sao lưu EBS hoàn tất hoặc thu thập dữ liệu pháp y (forensic data) chi tiết. Thích hợp cho các hành động nhẹ và tức thời, như gắn thẻ, cách ly instance bằng cách thay đổi security group, hoặc gửi cảnh báo. 2. Playbook IR dựa trên Step Functions Phương pháp này sử dụng AWS Step Functions để điều phối phản hồi sự cố dưới dạng modular state machine, cho phép quy trình IR linh hoạt và mạnh mẽ hơn.\nKhông giống như Lambda, phương pháp này không bị giới hạn thời gian thực thi nghiêm ngặt, cho phép các workflow phức tạp, nhiều bước, có thể kéo dài hàng phút hoặc hàng giờ. Các tác vụ được chia thành các state độc lập và dễ quản lý, hỗ trợ thực thi song song, retry, delay, và xử lý lỗi. Phù hợp với các tình huống cần hành động theo trình tự như tạo snapshot, thu thập dữ liệu pháp y, gửi thông báo cho nhiều hệ thống, sau đó tiến hành cách ly hoặc xoá instance. Thông qua việc so sánh hai phương pháp, lab này sẽ cho thấy cách các công cụ tự động hoá của AWS có thể được tuỳ chỉnh để đáp ứng nhu cầu phản hồi — từ phản ứng nhanh đến khắc phục toàn diện.\nMục tiêu của Workshop Sau khi hoàn thành workshop này, bạn sẽ:\nThực hiện được các tác vụ phản hồi sự cố cơ bản một cách tự động, tập trung vào khoanh vùng (containment) và thu thập dữ liệu pháp y (forensic data collection). Hiểu được các hành động khắc phục có thể thực hiện và mức độ công sức cần thiết. Thời lượng workshop khoảng 3 giờ, ngay cả khi bạn không hoàn thành, hãy truy cập phần xoá tài nguyên để tránh phát sinh chi phí.\nNội dung Workshop Giới thiệu Các bước chuẩn bị Cấu hình phản hồi Cấu hình phản hồi tự động Xoá tài nguyên "
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.1-single-lambda-response/",
	"title": "Single Lambda response",
	"tags": [],
	"description": "",
	"content": "Cấu hình phản hồi bằng một Lambda function Trong phần này, bạn sẽ học cách triển khai hành động phản hồi sự cố tự động trên một AWS Lambda Function duy nhất. Hàm này sẽ thực hiện tất cả các hành động cần thiết trong cùng một đoạn mã.\nCác bước thực hiện bao gồm:\nTạo IAM policy và đính kèm vào IAM role mà Lambda function sẽ sử dụng để thực thi các phản hồi tự động. Tạo Lambda function. Kiểm thử Lambda function. Tạo EventBridge rule để gọi Lambda function dựa trên các phát hiện từ GuardDuty. Kiến trúc cho phương án này như sau:\nNội dung: Tạo IAM Policies và Roles Tạo Lambda Function Kiểm thử Lambda Function Tạo EventBridge Rule "
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/2-preparation/",
	"title": "Các bước chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Chúng ta sẽ chuẩn bị bằng cách tạo một IAM user để kiểm tra và gán các policy cần thiết. Bạn sẽ bật Amazon GuardDuty và triển khai CloudFormation template để tạo hạ tầng mẫu nhằm mô phỏng kẻ tấn công và mục tiêu.\nĐảm bảo rằng tài khoản được sử dụng cho workshop này KHÔNG phải là production account.\nNội dung: Triển khai CloudFormation stack Thiết lập Security Group Tạo IAM user để kiểm thử "
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.2-step-function-response/3.2.2-sns-subscription/",
	"title": "Đăng ký SNS",
	"tags": [],
	"description": "",
	"content": "Là một phần của CloudFormation stack mà bạn vừa tạo, bạn sẽ nhận được một email như sau tại địa chỉ bạn đã nhập trong quá trình triển khai template:\nBạn cần nhấn vào nút Confirm Subscription để có thể nhận được các thông báo mà State Machine sẽ gửi như một phần của quy trình phản hồi tự động. Sau khi xác nhận đăng ký, bạn sẽ thấy thông báo sau trên trang web được mở ra:\nEmail có thể mất vài phút để được gửi đến. Hãy kiểm tra cả thư mục SPAM trong trường hợp email không xuất hiện trong hộp thư chính.\nNếu bạn đã hoàn thành bước này, hãy tiếp tục với bước tiếp theo Test Step Functions.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.2-step-function-response/",
	"title": "Phản hồi Step Function",
	"tags": [],
	"description": "",
	"content": "Cấu hình phản hồi bằng Step Function Trong phần này, bạn sẽ học cách triển khai hành động phản hồi sự cố tự động thông qua một workflow được xây dựng bằng Step Functions. Những lợi ích của phương pháp này bao gồm:\nKhông bị giới hạn thời gian khi thực hiện các hành động. Hầu hết các lệnh gọi API của các dịch vụ AWS đều được hỗ trợ và có thể gọi trực tiếp mà không cần viết code. Định nghĩa quy trình làm việc bằng đồ thị. Kiểm soát tốt hơn các nhánh xử lý khác nhau. Các bước chúng ta sẽ thực hiện trong phương án này:\nTriển khai một CloudFormation template để tạo tất cả các tài nguyên cần thiết. Xác nhận đăng ký SNS để nhận thông báo qua email. Kiểm thử State Machine. Tạo một EventBridge rule để gọi State Machine dựa trên các phát hiện từ GuardDuty. Kiến trúc của phương án này như sau: Và đồ thị workflow của Step Function như sau: Giải thích ngắn gọn về workflow được trình bày:\nKiểm tra xem có instance ID trong phát hiện từ GuardDuty hay không.\nDựa trên mức độ nghiêm trọng (severity) của phát hiện từ GuardDuty:\nNếu severity từ 8 trở lên, một SNS notification sẽ được gửi tới email đã đăng ký (email bạn đã nhập khi triển khai CloudFormation). Nếu severity nhỏ hơn 8, một email Manual Approval sẽ được gửi đến email đã đăng ký: Nếu Manual Approval bị từ chối, workflow sẽ kết thúc và không thực hiện hành động nào. Nếu Manual Approval được chấp thuận, các hành động sau sẽ được thực hiện. Bật chế độ bảo vệ khỏi bị terminate trên EC2 instance.\nThay đổi hành vi khi shutdown của instance.\nÁp dụng Security Group ForensicSG cho instance.\nGán tag isolated cho instance.\nWorkflow kết thúc.\nNếu bạn đã đọc xong, hãy chuyển sang bước tiếp theo là Triển khai CloudFormation stack.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.1-single-lambda-response/3.1.2-create-lambda-function/",
	"title": "Tạo Lambda Function",
	"tags": [],
	"description": "",
	"content": " Tạo Lambda Function\nTrong thanh tìm kiếm, nhập Lambda, bạn sẽ được chuyển tới trang bắt đầu của Lambda. Nhấn Create a function Đặt tên function là: ec2instance-containment-with-forensics. Chọn Runtime: Python 3.9. Mở rộng phần Change default execution role, chọn Use an existing role. Chọn role ec2instance-containment-with-forensics-role. Kết quả sẽ như bên dưới, nhấn Create function. Sửa đổi Lambda function đã tạo\nVào tab Configuration, bấm nút Edit. Thay đổi Timeout thành 15 phút, rồi lưu lại. Tạo environment variables cho Lambda function. Vẫn trong Configuration, chọn Environment variables rồi bấm Edit. Thêm biến môi trường: Key: ForensicsSG Value: sg-...(ID của Security Group Forensics của bạn) Kết quả như hình bên dưới. Nhấn Save. Thêm code cho Lambda Function\nChọn tab Code bên cạnh Configuration. import boto3, json import time from datetime import date from botocore.exceptions import ClientError import os def lambda_handler(event, context): # Copyright 2022 - Amazon Web Services # Permission is hereby granted, free of charge, to any person obtaining a copy of this # software and associated documentation files (the \u0026#34;Software\u0026#34;), to deal in the Software # without restriction, including without limitation the rights to use, copy, modify, # merge, publish, distribute, sublicense, and/or sell copies of the Software, and to # permit persons to whom the Software is furnished to do so. # THE SOFTWARE IS PROVIDED \u0026#34;AS IS\u0026#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, # INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A # PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT # HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION # OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE # SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. # print(\u0026#39;## ENVIRONMENT VARIABLES\u0026#39;) # print(os.environ) # print(\u0026#39;## EVENT\u0026#39;) # print(event) response = \u0026#39;Error remediating the security finding.\u0026#39; try: # Gather Instance ID from CloudWatch event instanceID = event[\u0026#39;detail\u0026#39;][\u0026#39;resource\u0026#39;][\u0026#39;instanceDetails\u0026#39;][\u0026#39;instanceId\u0026#39;] print(\u0026#39;## INSTANCE ID: %s\u0026#39; % (instanceID)) # Get instance details client = boto3.client(\u0026#39;ec2\u0026#39;) ec2 = boto3.resource(\u0026#39;ec2\u0026#39;) instance = ec2.Instance(instanceID) instance_description = client.describe_instances(InstanceIds=[instanceID]) print(\u0026#39;## INSTANCE DESCRIPTION: %s\u0026#39; % (instance_description)) #------------------------------------------------------------------- # Protect instance from termination #------------------------------------------------------------------- ec2.Instance(instanceID).modify_attribute( DisableApiTermination={ \u0026#39;Value\u0026#39;: True }) ec2.Instance(instanceID).modify_attribute( InstanceInitiatedShutdownBehavior={ \u0026#39;Value\u0026#39;: \u0026#39;stop\u0026#39; }) #------------------------------------------------------------------- # Create tags to avoid accidental deletion of forensics evidence #------------------------------------------------------------------- ec2.create_tags(Resources=[instanceID], Tags=[{\u0026#39;Key\u0026#39;:\u0026#39;status\u0026#39;, \u0026#39;Value\u0026#39;:\u0026#39;isolated\u0026#39;}]) print(\u0026#39;## INSTANCE TAGS: %s\u0026#39; % (instance.tags)) #------------------------------------ ## Isolate Instance #------------------------------------ print(\u0026#39;quarantining instance -- %s, %s\u0026#39; % (instance.id, instance.instance_type)) # Change instance Security Group attribute to terminate connections and allow Forensics Team\u0026#39;s access instance.modify_attribute(Groups=[os.environ[\u0026#39;ForensicsSG\u0026#39;]]) print(\u0026#39;Instance ready for root cause analysis -- %s, %s\u0026#39; % (instance.id, instance.security_groups)) #------------------------------------ ## Create snapshots of EBS volumes #------------------------------------ description= \u0026#39;Isolated Instance:\u0026#39; + instance.id + \u0026#39; on account: \u0026#39; + event[\u0026#39;detail\u0026#39;][\u0026#39;accountId\u0026#39;] + \u0026#39; on \u0026#39; + date.today().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) SnapShotDetails = client.create_snapshots( Description=description, InstanceSpecification = { \u0026#39;InstanceId\u0026#39;: instanceID, \u0026#39;ExcludeBootVolume\u0026#39;: False } ) print(\u0026#39;Snapshot Created -- %s\u0026#39; % (SnapShotDetails)) response = \u0026#39;Instance \u0026#39; + instance.id + \u0026#39; auto-remediated\u0026#39; except ClientError as e: print(e) return response Nhấn Deploy để deploy function Lambda. Bạn có thể xem các comment trong code để hiểu chức năng từng phần.\nSau khi hoàn thành, tiếp tục với bước Test Lambda Function.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/2-preparation/2.2-set-up-security-group/",
	"title": "Thiết lập Security Group",
	"tags": [],
	"description": "",
	"content": "Tiếp theo, chúng ta sẽ tạo một Security Group.\nTruy cập Security group\nTìm kiếm Security group, nhấn vào Security group. Chọn Create security group. Trong giao diện Create security group, tại phần Basic details\nTại Security group name, đặt tên là: ForensicsSG. Đảm bảo chọn đúng VPC là (VPC-AutomatedIncidentResponeWorkshop) như hình bên dưới. Trong phần Inbound rules and Outbound rules\nTại Inbound rules, thêm các Inbound rules mới như sau: RDP TCP 3389 Source: (địa chỉ IP của bạn) Description (tuỳ chọn): RDP for IR team. SSH TCP 22 Source: (địa chỉ IP của bạn) Description (tuỳ chọn): SSH for IR team. Xoá toàn bộ Outbound rules như hình dưới. Nhấn Create security group. Policy đã được tạo thành công:\nSau khi tạo Security Group xong, hãy sao chép Security group ID và chuyển sang bước tiếp theo Tạo IAM user để kiểm thử\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/",
	"title": "Cấu hình phản hồi",
	"tags": [],
	"description": "",
	"content": "Trong phần này, bạn sẽ triển khai hành động phản hồi tự động cho sự cố theo hai cách khác nhau:\nTrên một AWS Lambda function duy nhất: đây là cách đơn giản nhất để thực thi các bước khắc phục, nhưng có hạn chế là không thể chờ các tác vụ như snapshot hoàn thành vì Lambda bị giới hạn timeout 15 phút.\nTrên State Machine thông qua Step Functions: đây là lựa chọn phức tạp hơn nhưng linh hoạt hơn vì có thể cấu hình phản hồi theo dạng mô-đun. Không có giới hạn về hành động hay thời gian chạy của State Machine.\nNội dung: Single Lambda response Step Function response "
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/2-preparation/2.3-create-an-iam-user-for-testing/",
	"title": "Tạo IAM user để kiểm thử",
	"tags": [],
	"description": "",
	"content": "Tạo người dùng IAM để kiểm thử Trong phần này, chúng ta sẽ gán policy cho role đã tạo trước đó để đảm bảo role có các quyền phù hợp được định nghĩa trong policy.\nTruy cập IAM Dashboard\nTìm kiếm IAM. Nhấn để truy cập IAM Dashboard. Tạo IAM policy trong IAM Dashboard\nTìm Policies ở side panel và chọn Create policy. Trong mục Specify permission, tại Policy editor nhấn chọn JSON để chuyển sang định dạng JSON, sau đó dán đoạn JSON sau vào: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;ec2:TerminateInstances\u0026#34;, \u0026#34;ec2:DeleteTags\u0026#34;, \u0026#34;ec2:CreateTags\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;StringEquals\u0026#34;: { \u0026#34;aws:ResourceTag/status\u0026#34;: \u0026#34;isolated\u0026#34; } } } ] } Nhấn Next. Trong phần Review and create, tại Policy details, đặt tên policy là: Deny-termination-of-isolated-instances. Giữ nguyên các thiết lập còn lại và nhấn Create policy. Sau đó bạn sẽ được chuyển về giao diện Policy. Trong tình huống thực tế, tác giả khuyến nghị sử dụng Service control policies (SCP)\nTạo Group\nTrong giao diện Policy, ở left side panel, chọn User groups. Nhấn Create group. Tại phần Create user group, đặt tên group là: ec2-user. Tại Attach permissions policies, gán các policy sau cho group: AmazonEC2FullAccess (AWS Managed Policy) Deny-termination-of-isolated-instances (policy vừa tạo) Nhấn Create group, kết quả sẽ như sau: Tạo user\nQuay lại side panel, chọn Users rồi nhấn Create user. Trong phần Specify user details, đặt tên User name là: testuser. Chọn yes tại Provide user access to the AWS Management console. Chọn I want to create an IAM user. Bạn có thể chọn autogenerated password hoặc custom password. Bỏ chọn User must create a new password at next sign-in nếu không cần. Nhấn Next để sang phần Set permission. Tại Permissions options, giữ mặc định là Add user to group. Trong User groups, thêm user này vào group ec2-user vừa tạo. Tiếp tục đến bước Create user. Nếu bạn chọn autogenerated password, nên sao chép mật khẩu vào notepad hoặc text editor để tránh mất quyền truy cập.\nSau khi user được tạo, quyền của user sẽ như sau: Đây chỉ là môi trường demo để minh họa rằng khi instance được gắn tag isolated, người dùng bình thường với policy này sẽ không thể terminate instance đó. Trong thực tế, bạn nên làm theo khuyến nghị bảo mật sử dụng temporary credentials theo best practice của Well-Architected Framework\nSau khi tạo testuser xong, hãy tiếp tục đến bước tiếp theo Cấu hình phản hồi\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.1-single-lambda-response/3.1.3-test-lambda-function/",
	"title": "Test Lambda Function",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ kiểm thử Lambda Function đã tạo ở bước trước.\nXem lại phần comment trong code để hiểu các bước hoạt động.\nXem qua các bước chính trong code. Lưu ý: đây chỉ là ví dụ, bạn có thể thêm nhiều hành động khác. Code có nhiều hàm print giúp bạn dễ dàng theo dõi trên CloudWatch Logs, hoặc bạn có thể giữ là comment nếu muốn. Tạo test event cho Lambda function\nTrong cùng trang Function code editor, Chọn Test, panel Create new test event sẽ mở ra, nhấn vào đó. Panel Create new test event sẽ mở, đặt tên test event là: GuardDutyViaCWE. Dán JSON test event vào Event JSON, cần edit lại vài phần trước khi chạy được: Thay \u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt; bằng AWS Account của bạn. Thay \u0026lt;\u0026lt;Instance ID\u0026gt;\u0026gt; bằng ID instance BasicLinuxTarget đã deploy (bạn có thể tìm ID như hình). { \u0026#34;version\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;cd2d702e-ab31-411b-9344-793ce56b1bc7\u0026#34;, \u0026#34;detail-type\u0026#34;: \u0026#34;GuardDuty Finding\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;aws.guardduty\u0026#34;, \u0026#34;account\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;1970-01-01T00:00:00Z\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;resources\u0026#34;: [], \u0026#34;detail\u0026#34;: { \u0026#34;schemaVersion\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;partition\u0026#34;: \u0026#34;aws\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;b0baa89de4ab301f8d0a8c9a3dfd5726\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:guardduty:us-east-1:\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;:detector/feb3c048238f682b8902532ec100b3fb/finding/b0baa89de4ab301f8d0a8c9a3dfd5726\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;UnauthorizedAccess:EC2/TorClient\u0026#34;, \u0026#34;resource\u0026#34;: { \u0026#34;instanceDetails\u0026#34;: { \u0026#34;instanceId\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Instance ID\u0026gt;\u0026gt;\u0026#34; } } } } Sau khi chỉnh sửa xong, nhấn Save. Kiểm tra trạng thái instance BasicLinuxTarget trên EC2 console trước khi chạy test. Bạn có thể trả lời những câu hỏi sau không? • Instance đang dùng Security Group nào?. • Instance có những tag gì?. • Có snapshot nào liên quan đến instance không?. Chạy test event vừa tạo và kiểm tra trạng thái instance BasicLinuxTarget sau khi chạy. Bạn có thể trả lời: • Security Group đã thay đổi chưa? • Tag đã thay đổi chưa? • Snapshot mới được tạo chưa? • Dùng trình duyệt khác hoặc chế độ ẩn danh, đăng nhập bằng user IAM `testuser` (đã tạo ở phần Setup), thử xóa instance BasicLinuxTarget. • Bạn có xóa được instance không? Khi dùng user testuser xóa instance BasicLinuxTarget, bạn sẽ gặp lỗi như hình dưới. Khi hoàn thành, tiếp tục bước tiếp theo trong Workshop là Create a EventBridge Rule.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.2-step-function-response/3.2.3-test-the-step-functions/",
	"title": "Test Step Functions",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ kiểm thử Step Functions đã được tạo trước đó.\nTruy cập vào dịch vụ Step Functions và trong mục State machines, chọn tên của state machine mới được tạo PREFIX_StateMachine.\nChọn Start execution\nSao chép đoạn JSON bên dưới và dán vào phần Input, tuy nhiên bạn cần chỉnh sửa vài giá trị trước khi chạy. { \u0026#34;version\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;cd2d702e-ab31-411b-9344-793ce56b1bc7\u0026#34;, \u0026#34;detail-type\u0026#34;: \u0026#34;GuardDuty Finding\u0026#34;, \u0026#34;source\u0026#34;: \u0026#34;aws.guardduty\u0026#34;, \u0026#34;account\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;\u0026#34;, \u0026#34;time\u0026#34;: \u0026#34;1970-01-01T00:00:00Z\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;resources\u0026#34;: [], \u0026#34;detail\u0026#34;: { \u0026#34;schemaVersion\u0026#34;: \u0026#34;2.0\u0026#34;, \u0026#34;accountId\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;\u0026#34;, \u0026#34;region\u0026#34;: \u0026#34;us-east-1\u0026#34;, \u0026#34;partition\u0026#34;: \u0026#34;aws\u0026#34;, \u0026#34;id\u0026#34;: \u0026#34;b0baa89de4ab301f8d0a8c9a3dfd5726\u0026#34;, \u0026#34;arn\u0026#34;: \u0026#34;arn:aws:guardduty:us-east-1:\u0026lt;\u0026lt;Account ID\u0026gt;\u0026gt;:detector/feb3c048238f682b8902532ec100b3fb/finding/b0baa89de4ab301f8d0a8c9a3dfd5726\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Bitcoin-related domain name queried by EC2 instance \u0026lt;\u0026lt;Instance ID\u0026gt;\u0026gt;.\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;CryptoCurrency:EC2/BitcoinTool.B!DNS\u0026#34;, \u0026#34;severity\u0026#34;: 8, \u0026#34;resource\u0026#34;: { \u0026#34;instanceDetails\u0026#34;: { \u0026#34;instanceId\u0026#34;: \u0026#34;\u0026lt;\u0026lt;Instance ID\u0026gt;\u0026gt;\u0026#34; } } } } Thay thế Account ID bằng tài khoản của bạn. Thay thế Instance ID bằng ID của instance \u0026ldquo;BasicLinuxTarget\u0026rdquo; được triển khai bởi CloudFormation template. (Xem hình dưới để biết cách tìm Instance ID). Sau khi thay thế đầy đủ Account ID và Instance ID. Kiểm tra trạng thái trước khi thực thi: vào EC2 console để kiểm tra trạng thái hiện tại của instance \u0026ldquo;BasicLinuxTarget\u0026rdquo; Bạn có thể trả lời các câu hỏi sau không? • Nó đang sử dụng Security Group nào? • Nó có các tag nào? • Có snapshot nào liên quan đến instance này không? Nhấn nút Start execution, rồi kiểm tra lại trạng thái sau khi thực thi của instance \u0026ldquo;BasicLinuxTarget\u0026rdquo; Bạn có thể trả lời các câu hỏi sau không? • Security Group có thay đổi không? • Các tag có thay đổi không? • Có Snapshot mới nào được tạo ra không? • Đăng nhập bằng trình duyệt khác hoặc chế độ riêng tư, sử dụng liên kết trên IAM Dashboard (như hình bên dưới) để kiểm tra xem bạn có thể xóa EC2 bằng người dùng IAM testuser đã tạo ở bước cài đặt không. • Bạn có thể xóa được instance không? Khi bạn sử dụng testuser để cố gắng xóa instance \u0026ldquo;BasicLinuxTarget\u0026rdquo;, bạn sẽ thấy lỗi như hình dưới. Kiểm thử State Machine với mức độ nghiêm trọng (severity) khác\nLàm lại các bước như trên nhưng thay đổi giá trị biến severity trong JSON từ 8 thành 7. Quy trình hoạt động có giống như trước không? Điều gì đã thay đổi? Khi bạn đã hoàn thành tất cả các bước, hãy tiếp tục sang phần tiếp theo của Workshop là Tạo EventBridge Rule\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.1-single-lambda-response/3.1.4-create-eventbridge-rule/",
	"title": "Tạo EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo một EventBridge Rule để tự động tạo snapshot cho BasicLinuxTarget.\nTạo EventBridge Rule Tìm kiếm EventBridge. Bạn sẽ được dẫn đến trang chủ EventBridge, nhấn vào Create Rule. Đặt tên rule là: gd-compromised-instance-remediation, phần mô tả có thể bỏ trống, sau đó tiếp tục tạo. Ở phần Event pattern, dưới Creation method chọn Custom pattern (JSON editor), dán đoạn JSON vào editor. { \u0026#34;source\u0026#34;: [\u0026#34;aws.guardduty\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;type\u0026#34;: [\u0026#34;UnauthorizedAccess:EC2/TorClient\u0026#34;, \u0026#34;Backdoor:EC2/C\u0026amp;CActivity.B!DNS\u0026#34;, \u0026#34;Trojan:EC2/DNSDataExfiltration\u0026#34;, \u0026#34;CryptoCurrency:EC2/BitcoinTool.B\u0026#34;, \u0026#34;CryptoCurrency:EC2/BitcoinTool.B!DNS\u0026#34;] } } Kết quả sẽ như hình bên dưới, rồi nhấn Next. Chọn Lambda function làm target. Chọn function ec2instance-containment-with-forensics làm Function. (Kết quả sẽ như hình) Giữ nguyên các thiết lập còn lại và tạo Rule. Hãy chắc chắn rằng instance đã được cách ly trước khi tạo snapshot, nếu không bạn có thể bị tạo nhiều snapshot liên tục mỗi 15 phút (hoặc 6 tiếng tùy cấu hình GuardDuty). Tác giả khuyến nghị nên tắt rule này sau khi hoàn tất quá trình testing.\nKhi bạn đã hoàn thành tất cả các bước, hãy chuyển sang phần tiếp theo của Workshop là Configure Automated Response hoặc bạn có thể thực hiện Step Function response.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/3-configure-response/3.2-step-function-response/3.2.4-create-eventbridge-rule/",
	"title": "Tạo EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ tạo một EventBridge Rule để tạo snapshot cho BasicLinuxTarget.\nTạo EventBridge Rule Tìm kiếm dịch vụ EventBridge. Truy cập vào trang chính của EventBridge, sau đó nhấn Create Rule. Đặt tên cho rule là: gd-compromised-instance-remediation (nếu bạn vẫn giữ rule cũ thì thêm vào đuôi -sf), phần mô tả là tùy chọn, sau đó tiếp tục tạo rule. Trong mục Event pattern, Creation method chọn Custom pattern (JSON editor) và dán nội dung JSON bên dưới vào editor { \u0026#34;source\u0026#34;: [\u0026#34;aws.guardduty\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;type\u0026#34;: [\u0026#34;UnauthorizedAccess:EC2/TorClient\u0026#34;, \u0026#34;Backdoor:EC2/C\u0026amp;CActivity.B!DNS\u0026#34;, \u0026#34;Trojan:EC2/DNSDataExfiltration\u0026#34;, \u0026#34;CryptoCurrency:EC2/BitcoinTool.B\u0026#34;, \u0026#34;CryptoCurrency:EC2/BitcoinTool.B!DNS\u0026#34;] } } Kết quả sẽ như thế này, sau đó nhấn Next. Chọn Step Functions state machine làm mục tiêu (target). Chọn State Machine mà chúng ta đã kiểm thử trước đó (PREFIX_StateMachine) làm Target. (Kết quả sẽ trông như hình dưới) Giữ nguyên các thiết lập còn lại và nhấn Create Rule để hoàn tất. Hãy đảm bảo rằng instance đã được cách ly trước khi tạo snapshot, nếu không bạn có thể gặp tình trạng snapshot bị tạo liên tục mỗi 15 phút (hoặc 6 giờ tùy theo cấu hình GuardDuty của bạn). Tác giả khuyến nghị bạn nên vô hiệu hóa rule này sau khi đã hoàn thành việc kiểm thử.\nKhi bạn đã hoàn thành tất cả các bước, hãy tiếp tục sang phần tiếp theo của Workshop là Cấu hình phản hồi tự động\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/4-configure-automated-response/",
	"title": "Cấu hình phản hồi tự động",
	"tags": [],
	"description": "",
	"content": "Cấu hình phản hồi tự động Trong phần này, bạn sẽ học cách tạo các phát hiện mẫu bằng GuardDuty và sử dụng chúng làm đầu vào cho quy trình phản hồi sự cố tự động.\nTrong môi trường, có một instance \u0026ldquo;RedTeam\u0026rdquo; sẽ tạo ra các phát hiện từ GuardDuty.\nTruy cập vào GuardDuty, chọn Settings. Trong phần Findings export options, tần suất cập nhật nên là mỗi 15 phút nếu bạn sử dụng CloudFormation template. (Nếu chưa được thiết lập, hãy nhấn Edit và chỉnh tần suất cập nhật thành mỗi 15 phút). Sau đó chọn mục Findings. Bạn cần chờ một lúc để các phát hiện được tạo ra, ngoài ra một số dịch vụ khác đang chạy có thể làm tăng chi phí. Nếu không muốn chờ, bạn có thể bỏ qua phần này (optional). Dưới đây là ví dụ kết quả mà bạn có thể thấy.\nKiểm thử phản hồi tự động Để kiểm thử phản hồi tự động, bạn có thể:\nChờ instance RedTeam tạo ra sự kiện, vì nó đang sử dụng GuardDuty tester scripts\nBạn cũng có thể tự tạo một instance Windows mới, tạo một Security Group cho phép truy cập RDP (cổng 3389) từ địa chỉ IP của bạn, và mô phỏng hành vi kết nối độc hại bằng cách:\nCài đặt TOR Browser Kết nối tới các mining pool như pool.minergate.com Hoặc tạo một instance Linux mới, với Security Group cho phép SSH (cổng 22) từ địa chỉ IP của bạn, và gọi tới domain giả mạo đã được thêm vào threat intelligence feed (dùng để kiểm thử phát hiện Command \u0026amp; Control) với lệnh sau:\ndig GuardDutyC2ActivityB.com any Chờ một vài phút (có thể mất đến 20 phút) để GuardDuty tạo ra các phát hiện. Nếu bạn chọn dùng instance Linux, có thể kết nối thông qua EC2 Instance Connect để truy cập terminal, hoặc dùng SSH.\nĐể kết nối vào instance RedTeam, bạn có thể sử dụng Systems Manager Session Manager, tuy nhiên cần gán instance profile cho SSM và khởi động lại instance.\n"
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/5-clean-up/",
	"title": "Xoá tài nguyên",
	"tags": [],
	"description": "",
	"content": "Xoá tài nguyên Để tránh phát sinh chi phí không cần thiết cho tài khoản của bạn, chúng tôi khuyến nghị bạn nên xoá các tài nguyên đã được tạo trong suốt quá trình thực hiện workshop này. Nếu bạn muốn giữ lại để xem xét sau, hãy đảm bảo xoá tài nguyên khi hoàn tất.\nLưu ý rằng bạn cần xoá một số tài nguyên thủ công trước khi xoá các CloudFormation stack, vì vậy vui lòng thực hiện các bước sau theo thứ tự.\nTắt termination protection cho các EC2 instances liên quan.\nMở EC2 console. Chọn instance cần xoá. Nhấn vào Actions, chọn Instance settings, sau đó thay đổi termination protection. Bỏ chọn mục Enable checkbox, nhấn Save. Xoá CloudFormation stack.\nTruy cập CloudFormation console. Chọn stack phù hợp (lưu ý rằng tuỳ thuộc vào phản hồi tự động bạn đã triển khai, có thể có 2 stack và 1 nested stack). Nhấn Delete. Đảm bảo rằng trạng thái stack sau khi xoá là DELETE_COMPLETE, quá trình này có thể mất vài phút.\nKiểm tra xem GuardDuty có được vô hiệu hóa tự động hay không, nếu không thì bạn cần tắt thủ công.\nMở GuardDuty console. Nhấn vào mục Settings ở menu bên trái. Kéo xuống cuối trang. Nhấn Disable GuardDuty. Tắt GuardDuty sẽ xoá toàn bộ dữ liệu của dịch vụ này.\nKiểm tra và xoá bất kỳ EC2 snapshot nào còn sót lại được tạo trong quá trình workshop. "
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://nnminhtan.github.io/AWS-Workshop/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]